(()=>{"use strict";function e(e,t){let o=document.createElement("div");o.className="productCard",o.dataset.productId=e.id,o.innerHTML=`<div class="productCard__imgContainer">\n      <img class="productCard__img" src="${e.image}" alt="image">\n    </div>\n    <div class="productCard__info">\n      <h3 class="productCard__title">${e.title}</h3>\n      <p class="productCard__category">${e.category}</p>\n      <p class="productCard__price">${e.price}</p>\n    </div>`,t.appendChild(o)}const t=document.getElementById("product-list");let o=[],r="";const n=document.getElementById("loadMoreProducts"),c=document.getElementById("deleteProduct"),l=document.getElementById("addProduct"),a={title:"test product",price:13.5,description:"lorem ipsum set",image:"https://i.pravatar.cc",category:"electronic"};(async function(){let e="https://fakestoreapi.com/products";isNaN(6)||(e+="?limit=6");try{console.log("Sending fetch request");let t=await fetch(e);console.log("loading data");let o=await t.json();return console.log(o),o}catch(e){console.log("Error loading products",e)}})().then((r=>{r.forEach((r=>{e(r,t),o.push(r)})),console.log("productsData:",o)})).catch((e=>{console.log("error loading data from API",e)})),console.log("loaded from index.js"),console.log("index.js code runs. Dev server and auto reload works"),n.addEventListener("click",(n=>{(function(){if(o.length>=20)return;const n=Math.min(6,20-o.length);let c=new Array(n).fill().map(((e,t)=>o.length+t+1));Promise.allSettled(c.map((e=>async function(e){let t=`https://fakestoreapi.com/products/${e}`;try{console.log("Sending fetch request");let e=await fetch(t);if(!e.ok)throw new Error("Network problem. ");console.log("loading data");let o=await e.json();return console.log(o),o}catch(e){console.log("Error loading products",e)}}(e)))).then((n=>{n.forEach((n=>{(!n??"fulfilled"!==n.status)||(o.push(n.value),""!==r&&n.value.category===r&&e(n.value,t))}))})).catch((e=>console.log(e)))})(n.target),n.target.setAttribute("disabled","")})),c.addEventListener("click",(()=>async function(){try{console.log("Sending fetch request for deleting product10");let e=await fetch("https://fakestoreapi.com/products/10",{method:"DELETE"});if(!e.ok)throw new Error("Network problem");let t=await e.json();if(null===t)throw console.dir(t),new Error("Удаляемый продкут в базе данных отсутствует");return 10===t.id&&alert(`Продукт: /n ${t.title} /n /n Успешно удален`),console.log("Результат удаления объекта:"),console.dir(t),t}catch(e){alert("Error deleting product "+e)}}())),l.addEventListener("click",(()=>async function(e){const t={method:"POST",body:JSON.stringify(e)};try{console.log("Sending fetch request for adding new product");let e=await fetch("https://fakestoreapi.com/products",t);if(!e.ok)throw new Error("Network error");console.log("Loading server response of adding new product");let o=await e.json();return console.log("Result of adding new product"),console.dir(o),o}catch(e){console.log("Результат добавления нового объекта"),console.log("Ошибка добавления нового товара ",e)}}(a))),async function(){let n=document.createElement("div");n.className="productList__categories",n.setAttribute("id","productList__categories"),async function(){try{console.log("Sending fetch request for load categories");let e=await fetch("https://fakestoreapi.com/products/categories");if(!e.ok)throw new Error("Network error");console.log("Loading categories names");let t=await e.json();return console.log(t),t}catch(e){console.log("Error loading categories ",e)}}().then((c=>function(n,c){let l='<option value="">--Show all products--</option>';n.forEach((e=>{l+=`<option value="${e}">\n        ${e}\n      </option>`}));let a=`<label for="productList__select">\n      Show products filtered by category:\n    </label>\n    <select name="productList__select" id="productList__select">\n      ${l};\n    </select>`;c.innerHTML=a,t.parentNode.prepend(c),c.addEventListener("change",(n=>function(n,c){let l;t.innerHTML="",r=c,l=""!==c?o.filter((e=>e.category===c)):o,l.forEach((o=>e(o,t)))}(0,n.target.value)))}(c,n)))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,