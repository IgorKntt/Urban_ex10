(()=>{"use strict";var e={};function t(e,t){let o=document.createElement("div");o.className="productCard",o.dataset.productId=e.id,o.innerHTML=`<div class="productCard__imgContainer">\n      <img class="productCard__img" src="${e.image}" alt="image">\n    </div>\n    <div class="productCard__info">\n      <h3 class="productCard__title">${e.title}</h3>\n      <p class="productCard__category">${e.category}</p>\n      <p class="productCard__price">${e.price}</p>\n    </div>`,t.appendChild(o)}e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var o=e.g.document;if(!t&&o&&(o.currentScript&&"SCRIPT"===o.currentScript.tagName.toUpperCase()&&(t=o.currentScript.src),!t)){var r=o.getElementsByTagName("script");if(r.length)for(var n=r.length-1;n>-1&&(!t||!/^http(s?):/.test(t));)t=r[n--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();const o=document.getElementById("product-list");let r=[],n="";function a(e,a){let c;o.innerHTML="",n=a,c=""!==a?r.filter((t=>t[e]===a)):r,c.forEach((e=>t(e,o)))}const c=e.p+"7d7081bd4e58ad8aeeed.svg",l=e.p+"7d7081bd4e58ad8aeeed.svg",i=e.p+"57fb51bd3c0d216f8d77.svg",d=e.p+"bfe9ee3da5d9adca399a.svg",s=e.p+"986b24e86270651ca1ba.svg",p=document.getElementById("loadMoreProducts"),u=document.getElementById("deleteProduct"),g=document.getElementById("addProduct"),m={title:"test product",price:13.5,description:"lorem ipsum set",image:"https://i.pravatar.cc",category:"electronic"};!function(){const e=document.createElement("header"),t=document.createElement("div"),o=document.createElement("div"),r=document.createElement("nav"),n=document.createElement("div"),a=document.getElementsByTagName("body")[0];e.setAttribute("id","header"),e.className="header",t.className="header__contentWrapper",o.className="header__logo",o.innerHTML=`<img src="${c}" alt="logo">`,r.className="header__nav",r.innerHTML="<ul>\n          <li>Home</li>\n          <li>Shop</li>\n          <li>Our Story</li>\n          <li>Blog</li>\n          <li>Contact Us</li>\n        </ul>",n.className="header__menu",n.innerHTML="Menu items",t.append(o,r,n),e.appendChild(t),a.prepend(e)}(),async function(){try{let e=await async function(){let e="https://fakestoreapi.com/products";isNaN(6)||(e+="?limit=6");try{console.log("Sending fetch request");let t=await fetch(e);if(!t.ok)throw new Error("Network error");console.log("loading data");let o=await t.json();return console.log(o),o}catch(e){console.log("Error loading products",e)}}();console.log(e),e.forEach((e=>{t(e,o),r.push(e)})),async function(e){let t=document.createElement("div");t.className="productList__categories",t.setAttribute("id","productList__categories"),async function(){try{console.log("Sending fetch request for load categories");let e=await fetch("https://fakestoreapi.com/products/categories");if(!e.ok)throw new Error("Network error");console.log("Loading categories names");let t=await e.json();return console.log(t),t}catch(e){console.log("Error loading categories ",e)}}().then((e=>function(e,t){let o='<option value="">--Show all products--</option>';e.forEach((e=>{o+=`<option value="${e}">\n        ${e}\n      </option>`}));let r=`<label for="productList__select">\n      Show products filtered by category:\n    </label>\n    <select name="productList__select" id="productList__select">\n      ${o};\n    </select>`;t.innerHTML=r}(e,t))),e.parentNode.prepend(t),t.addEventListener("change",(e=>a("category",e.target.value)))}(o)}catch(e){console.log("error loading data from API",e)}}(),function(){const e=document.getElementsByTagName("body")[0],t=document.createElement("footer"),o=document.createElement("div"),r=document.createElement("div"),n=document.createElement("div"),a=document.createElement("address");document.createElement("div"),document.createElement("div"),document.createElement("div"),a.className="footer__address",a.innerHTML=`\n    <p>\n      <img src=${l} alt="Logo" class="footer__logo">\n    </p>\n    <p>\n      <img src=${d} alt="phone" width=24 height=24>\n      <a href="tel:+1 7045550127">(704) 555-0127</a>\n    </p>\n    <p>\n      <img src=${i} alt="mail" width=24 height=24>\n      <a href="mailto:krist@example.com">krist@example.com</a>\n    </p>\n    <p>\n      <img src=${s} alt="address" width=24 height=24>\n      <span>3891 Ranch</span>\n    </p>`,r.append(a),t.setAttribute("id","footer"),t.className="footer",o.className="footer__wrapper",o.append(r,n),t.append(o),e.append(t)}(),console.log("loaded from index.js"),console.log("index.js code runs. Dev server and auto reload works"),p.addEventListener("click",(e=>{(function(e){if(console.log("load more products called"),r.length>=20)return;const t=Math.min(6,20-r.length);let o=new Array(t).fill().map(((e,t)=>r.length+t+1));Promise.allSettled(o.map((e=>async function(e){let t=`https://fakestoreapi.com/products/${e}`;try{console.log("Sending fetch request");let e=await fetch(t);if(!e.ok)throw new Error("Network problem. ");console.log("loading data");let o=await e.json();return console.log(o),o}catch(e){console.log("Error loading products",e)}}(e)))).then((t=>{t.forEach((e=>{(!e??"fulfilled"!==e.status)||r.push(e.value)})),a("category",n),r.length<20?(e.removeAttribute("disabled"),e.innerHTML="Загрузить еще"):e.innerHTML="Нет данных для загрузки"})).catch((e=>console.log(e)))})(e.target),e.target.setAttribute("disabled",""),e.target.textContent="Загрузка..."})),u.addEventListener("click",(()=>async function(){try{console.log("Sending fetch request for deleting product10");let e=await fetch("https://fakestoreapi.com/products/10",{method:"DELETE"});if(!e.ok)throw new Error("Network problem");let t=await e.json();if(null===t)throw console.dir(t),new Error("Удаляемый продкут в базе данных отсутствует");return 10===t.id&&alert(`Продукт: /n ${t.title} /n /n Успешно удален`),console.log("Результат удаления объекта:"),console.dir(t),t}catch(e){alert("Error deleting product "+e)}}())),g.addEventListener("click",(()=>async function(e){const t={method:"POST",body:JSON.stringify(e)};try{console.log("Sending fetch request for adding new product");let e=await fetch("https://fakestoreapi.com/products",t);if(!e.ok)throw new Error("Network error");console.log("Loading server response of adding new product");let o=await e.json();return console.log("Result of adding new product"),console.dir(o),alert(`New product added. Assigned id - ${o.id}`),o}catch(e){console.log("Результат добавления нового объекта"),console.log("Ошибка добавления нового товара ",e)}}(m)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,