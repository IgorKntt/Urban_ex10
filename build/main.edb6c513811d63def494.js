(()=>{"use strict";function e(e,t){let o=document.createElement("div");o.className="productCard",o.dataset.productId=e.id,o.innerHTML=`<div class="productCard__imgContainer">\n      <img class="productCard__img" src="${e.image}" alt="image">\n    </div>\n    <div class="productCard__info">\n      <h3 class="productCard__title">${e.title}</h3>\n      <p class="productCard__category">${e.category}</p>\n      <p class="productCard__price">${e.price}</p>\n    </div>`,t.appendChild(o)}const t=document.getElementById("product-list");let o=[];const r=document.getElementById("loadMoreProducts"),n=document.getElementById("deleteProduct"),c=document.getElementById("addProduct"),l={title:"test product",price:13.5,description:"lorem ipsum set",image:"https://i.pravatar.cc",category:"electronic"};!async function(){try{let r=await async function(){let e="https://fakestoreapi.com/products";isNaN(6)||(e+="?limit=6");try{console.log("Sending fetch request");let t=await fetch(e);if(!t.ok)throw new Error("Network error");console.log("loading data");let o=await t.json();return console.log(o),o}catch(e){console.log("Error loading products",e)}}();console.log(r),r.forEach((r=>{e(r,t),o.push(r),async function(){let r=document.createElement("div");r.className="productList__categories",r.setAttribute("id","productList__categories"),async function(){try{console.log("Sending fetch request for load categories");let e=await fetch("https://fakestoreapi.com/products/categories");if(!e.ok)throw new Error("Network error");console.log("Loading categories names");let t=await e.json();return console.log(t),t}catch(e){console.log("Error loading categories ",e)}}().then((n=>function(r,n){let c='<option value="">--Show all products--</option>';r.forEach((e=>{c+=`<option value="${e}">\n        ${e}\n      </option>`}));let l=`<label for="productList__select">\n      Show products filtered by category:\n    </label>\n    <select name="productList__select" id="productList__select">\n      ${c};\n    </select>`;n.innerHTML=l,productList.parentNode.prepend(n),n.addEventListener("change",(r=>function(r,n){let c;t.innerHTML="",c=""!==n?o.filter((e=>e.category===n)):o,c.forEach((o=>e(o,t)))}(0,r.target.value)))}(n,r)))}()}))}catch(e){console.log("error loading data from API",e)}}(),console.log("loaded from index.js"),console.log("index.js code runs. Dev server and auto reload works"),r.addEventListener("click",(e=>{(function(e){if(console.log("load more products called"),o.length>=20)return;const t=Math.min(6,20-o.length);let r=new Array(t).fill().map(((e,t)=>o.length+t+1));Promise.allSettled(r.map((e=>async function(e){let t=`https://fakestoreapi.com/products/${e}`;try{console.log("Sending fetch request");let e=await fetch(t);if(!e.ok)throw new Error("Network problem. ");console.log("loading data");let o=await e.json();return console.log(o),o}catch(e){console.log("Error loading products",e)}}(e)))).then((t=>{t.forEach((e=>{(!e??"fulfilled"!==e.status)||o.push(e.value)})),o.length<20?(e.removeAttribute("disabled"),e.innerHTML="Загрузить еще"):e.innerHTML="Нет данных для загрузки"})).catch((e=>console.log(e)))})(e.target),e.target.setAttribute("disabled",""),e.target.innerHTML="Загрузка..."})),n.addEventListener("click",(()=>async function(){try{console.log("Sending fetch request for deleting product10");let e=await fetch("https://fakestoreapi.com/products/10",{method:"DELETE"});if(!e.ok)throw new Error("Network problem");let t=await e.json();if(null===t)throw console.dir(t),new Error("Удаляемый продкут в базе данных отсутствует");return 10===t.id&&alert(`Продукт: /n ${t.title} /n /n Успешно удален`),console.log("Результат удаления объекта:"),console.dir(t),t}catch(e){alert("Error deleting product "+e)}}())),c.addEventListener("click",(()=>async function(e){const t={method:"POST",body:JSON.stringify(e)};try{console.log("Sending fetch request for adding new product");let e=await fetch("https://fakestoreapi.com/products",t);if(!e.ok)throw new Error("Network error");console.log("Loading server response of adding new product");let o=await e.json();return console.log("Result of adding new product"),console.dir(o),alert(`New product added. Assigned id - ${o.id}`),o}catch(e){console.log("Результат добавления нового объекта"),console.log("Ошибка добавления нового товара ",e)}}(l)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,